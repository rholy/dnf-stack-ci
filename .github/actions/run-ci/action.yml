name: Run DNF CI

inputs:
  copr-user:
    description: The Copr user to build packages under
    required: true

runs:
  using: "composite"
  steps:
    - name: Rebase the pull request on target branch
      shell: bash
      run: |
        pushd gits/${{github.event.pull_request.head.repo.name}}
        git config user.name github-actions
        git config user.email github-actions@github.com
        echo "Rebasing \"`git log --oneline -1`\" on ${{github.event.pull_request.base.ref}}: \"`git log --oneline -1 origin/${{github.event.pull_request.base.ref}}`\""
        git rebase origin/${{github.event.pull_request.base.ref}}
        popd

    - name: Build packages in Copr
      shell: bash
      run: |
        PROJECT_NAME="CI-${{github.event.pull_request.head.repo.name}}-pr${{github.event.pull_request.number}}"
        # if there's a git already checked out in the `gits` directory, rpm-gitoverlay will use it
        rpm-gitoverlay -o rpmlist --gitdir=gits build-overlay -s overlays/dnf-ci rpm copr --owner ${{inputs.copr-user}} --project "$PROJECT_NAME" --chroot fedora-32-x86_64 --delete-project-after-days=7

        # delete the Copr secret just to be on the safe side when running potentially untrusted PR code (albeit in a container, which should be secure)
        rm -rf "$HOME/.config/copr"

        for RPM in $(cat rpmlist); do wget -P rpms $RPM; done

    - name: Run tests
      shell: bash
      run: |
        # needed for podman user containers to work
        export STORAGE_OPTS='overlay2.mount_program=/usr/bin/fuse-overlayfs'
        echo "[engine]" > /etc/containers/containers.conf
        echo "cgroup_manager = \"cgroupfs\"" >> /etc/containers/containers.conf
        echo "events_logger = \"file\"" >> /etc/containers/containers.conf

        CONTAINER=$(uuidgen)
        ./dnf-testing.sh -c $CONTAINER build jjb

        TESTS=($(./dnf-testing.sh -c $CONTAINER list))
        mkdir "test-results"
        TEST_DIR=`readlink -f "test-results"`
        parallel -j2 ./dnf-testing.sh --container "$CONTAINER" run --junit-directory "$TEST_DIR" --noxfail "{}" ::: "${TESTS[@]}"
