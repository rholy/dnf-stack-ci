############
## MACROS ##
############

- scm:
    name: ci-dnf-stack-scm
    scm:
      - git:
          url: "https://github.com/rpm-software-management/ci-dnf-stack.git"
          branches:
            - origin/master
          basedir: ci-dnf-stack
          skip-tag: True

- defaults:
    name: github-testers-defaults
    description: |
        Maintainer: <a href="mailto:lhrazky@redhat.com">Lukas Hrazky</a><br>
        Managed by Jenkins Job Builder. <strong>Do not edit via web.</strong<br>
    wrappers:
      - workspace-cleanup
    github-context: "Jenkins (Red Hat)"

##############
## TRIGGERS ##
##############

- job-template:
    name: "dnf-{name}-trigger"
    defaults: github-testers-defaults
    concurrent: True
    node: dnf
    properties:
      # Required by GHPRB. Also adds a nice GitHub link on the job page.
      - github:
          url: "https://github.com/{github_repo}"
    scm:
      # Required to tell pollscm what we want to poll
      - "{name}-scm"
    triggers:
      - pollscm:
          # always check for new commits every 5 mins (ci trigger failsafe)
          cron: "H/5 * * * *"
          ignore-post-commit-hooks: True
      - github-pull-request:
          auth-id: "{ghprb-auth-id}"

          # Always check for PR activity every 5 mins (ci trigger failsafe)
          cron: "H/5 * * * *"

          github-hooks: True

          permit-all: True

          # the commit status context we want to update
          status-context: "{github-context}"

          # Update status when triggered only, and not when started
          triggered-status: "Testing job has been triggered."
          started-status: "--none--"

          # Don't do a status update if we succeeded since this is only the
          # triggering job. We will make manually update with success once the
          # testing job passes.
          success-status: "--none--"

          # Update status if somehow something goes wrong with triggering (but
          # that should Never Happen (tm))
          failure-status: "Internal error while triggering."
          error-status: "Internal error while triggering."
    builders:
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          if [ "$ROOT_BUILD_CAUSE" == "SCMTRIGGER" ]; then
            echo "GIT_BRANCH=${{GIT_BRANCH#origin/}}" >> props
            echo "GIT_COMMIT=$GIT_COMMIT" >> props
          fi
    publishers:
      - trigger-parameterized-builds:
          - project: "dnf-{name}-build"
            current-parameters: True
            trigger-with-no-params: True
            property-file: props
            condition: SUCCESS

###################
## UPDATE STATUS ##
###################

- job-template:
    name: "dnf-{name}-update-gh-status"
    defaults: github-testers-defaults
    concurrent: True
    node: dnf
    builders:
      - python: |
          from __future__ import print_function

          import os
          import sys

          import requests

          if os.environ["ROOT_BUILD_CAUSE"] == "GHPRBCAUSE":
              commit = os.environ["ghprbActualCommit"]
          elif os.environ["ROOT_BUILD_CAUSE"] == "SCMTRIGGER":
              commit = os.environ["GIT_COMMIT"]
          else:
              print("Triggered for unknown root cause, exiting..")
              sys.exit(0)

          print("Updating status for: %r" % commit)

          data = {{"state": os.environ["GH_STATE"]}}

          if "GH_CONTEXT" in os.environ:
              data["context"] = os.environ["GH_CONTEXT"]
          if "GH_URL" in os.environ:
              data["target_url"] = os.environ["GH_URL"]
          else:
              data["target_url"] = os.environ["BUILD_URL"]
          if "GH_DESC" in os.environ:
              data["description"] = os.environ["GH_DESC"]

          API_URL = ("https://api.github.com/repos/%s/statuses/%s" %
                     ("{github_repo}", commit))

          token_header = {{"Authorization": "token {github-token}"}}

          # Requires requests >= 2.4.2
          r = requests.post(API_URL, json=data, headers=token_header)

          if r.status_code != requests.codes.created:
              print("Failed to update commit status [HTTP %d]" % r.status_code)
              print(r.headers)
              print(r.json())
              sys.exit(1)

###########
## BUILD ##
###########

- job-template:
    name: "dnf-{name}-build"
    defaults: github-testers-defaults
    concurrent: True
    node: dnf
    scm:
      - ci-dnf-stack-scm
      - "{name}-scm"
    builders:
      - trigger-builds:
          - project: "dnf-{name}-update-gh-status"
            current-parameters: True
            predefined-parameters: |
              GH_STATE=pending
              GH_CONTEXT={github-context}
              GH_DESC=Building RPM git-overlay job is running.

      # Build overlay
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          pushd "{name}"
            if [ "$ROOT_BUILD_CAUSE" == "SCMTRIGGER" ]; then
              git checkout $GIT_COMMIT
            elif [ "$ROOT_BUILD_CAUSE" == "GHPRBCAUSE" ]; then
              git checkout "$ghprbTargetBranch"
              git fetch origin refs/pull/$ghprbPullId/head
              git merge FETCH_HEAD
            fi
          popd

          # hackish - when building directly libdnf rpm-gitoverlay need to use already cloned HEAD
          # if libdnf is build as a dependency, use dnf-4-master branch
          overlay_dir="dnf-master"
          if [ "{name}" == "libdnf" ]; then
            overlay_dir="libdnf-master"
          fi

          rpm-gitoverlay --log DEBUG --gitdir=`pwd` -o rpms build-overlay -s ci-dnf-stack/overlays/$overlay_dir rpm copr --chroot fedora-31-x86_64 --owner rpmsoftwaremanagement
          RPMS=`cat rpms | xargs`
          echo "RPMS=$RPMS" > props
    publishers:
      - trigger-parameterized-builds:
          - project: "dnf-{name}-provision"
            current-parameters: True
            condition: SUCCESS
            property-file: props
            fail-on-missing: True
          - project: "dnf-{name}-update-gh-status"
            current-parameters: True
            condition: UNSTABLE_OR_WORSE
            predefined-parameters: |
              GH_STATE=failure
              GH_CONTEXT={github-context}
              GH_DESC=Error while building RPM git-overlay.
      - workspace-cleanup:
          exclude:
            - props

###############
## PROVISION ##
###############

- job-template:
    name: "dnf-{name}-provision"
    defaults: github-testers-defaults
    concurrent: False
    node: dnf
    scm:
      - ci-dnf-stack-scm
    builders:
      # Download RPMs and prepare container
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          join() {{ local IFS="$1"; shift; echo "$*"; }}
          RPMS=($RPMS)
          pushd ci-dnf-stack
            pushd rpms
              join , "{{${{RPMS[@]}}}}" | xargs curl -O
            popd
            CONTAINER=$(uuidgen)
            ./dnf-testing.sh -c $CONTAINER build jjb
          popd

          echo "CONTAINER=$CONTAINER" > props
    publishers:
      - trigger-parameterized-builds:
          - project: "dnf-{name}-test"
            current-parameters: True
            condition: SUCCESS
            property-file: props
            fail-on-missing: True
          - project: "dnf-{name}-update-gh-status"
            current-parameters: True
            condition: UNSTABLE_OR_WORSE
            predefined-parameters: |
              GH_STATE=failure
              GH_CONTEXT={github-context}
              GH_DESC=Error while preparing container.
      - workspace-cleanup:
          exclude:
            - props

##########
## TEST ##
##########

- job-template:
    name: "dnf-{name}-test"
    defaults: github-testers-defaults
    concurrent: False
    node: dnf
    scm:
      - ci-dnf-stack-scm
    builders:
      - trigger-builds:
          - project: "dnf-{name}-update-gh-status"
            current-parameters: True
            predefined-parameters: |
              GH_STATE=pending
              GH_CONTEXT={github-context}
              GH_DESC=Testing job is running.
      # Run tests
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          TESTS=($(./ci-dnf-stack/dnf-testing.sh -c $CONTAINER list))
          #COMMANDS=('dnf-2' 'dnf-3')
          COMMANDS=('dnf-3')
          for cmd in ${{COMMANDS[@]}}; do
              mkdir -p "test-results/$cmd"
              TEST_DIR=`readlink -f "test-results/$cmd"`
              chcon -Rt svirt_sandbox_file_t "$TEST_DIR"
              parallel -j2 ./ci-dnf-stack/dnf-testing.sh --container "$CONTAINER" run --junit-directory "$TEST_DIR" --noxfail --command "$cmd" "{{}}" ::: "${{TESTS[@]}}" || :
          done

      # Analyze results
      - python: |
          import os
          import xunitparser

          all = [0, 0]
          for root, dirs, files in os.walk("test-results"):
              for name in files:
                  if name.endswith(".xml"):
                      xml = os.path.join(root, name)
                      with open(xml, "r") as test:
                          ts, result = xunitparser.parse(test)
                      passed = result.wasSuccessful()
                      all[1] += 1
                      if passed:
                          all[0] += 1
          with open("GH_UPDATE.txt", "w") as gh:
              gh.write("GH_CONTEXT={github-context}\n")
              if all[1] == 0:
                  gh.write("GH_STATE=error\n")
                  gh.write("GH_DESC=0 tests ran\n")
              else:
                  if all[0] != all[1]:
                      gh.write("GH_STATE=failure\n")
                  else:
                      gh.write("GH_STATE=success\n")
                  gh.write("GH_DESC=%d/%d normal\n" % (all[0], all[1]))
    publishers:
      - trigger-parameterized-builds:
          - project: "dnf-{name}-update-gh-status"
            current-parameters: True
            condition: ALWAYS
            property-file: GH_UPDATE.txt
            fail-on-missing: True
      - junit:
          results: test-results/**/*.xml
      - trigger-parameterized-builds:
          - project: "dnf-{name}-teardown"
            current-parameters: True
            condition: ALWAYS
      - workspace-cleanup:
          exclude:
            - GH_UPDATE.txt
            - test-results/**/*.xml

##############
## TEARDOWN ##
##############

- job-template:
    name: "dnf-{name}-teardown"
    defaults: github-testers-defaults
    concurrent: False
    node: dnf
    builders:
      - shell: |
          sudo docker rmi -f "$CONTAINER"

###################
## PROJECT GROUP ##
###################

- job-group:
    name: github-testers-jobs
    jobs:
      - "dnf-{name}-trigger"
      - "dnf-{name}-update-gh-status"
      - "dnf-{name}-build"
      - "dnf-{name}-provision"
      - "dnf-{name}-test"
      - "dnf-{name}-teardown"
