############
## MACROS ##
############

- scm:
    name: rpm-gitoverlay-scm
    scm:
      - git:
          url: 'https://github.com/ignatenkobrain/rpm-gitoverlay.git'
          branches:
            # FIXME
            #- origin/master
            - origin/wip/subprocess_run
          basedir: rpm-gitoverlay
          skip-tag: True

- scm:
    name: ci-dnf-stack-scm
    scm:
      - git:
          # FIXME
          url: 'https://github.com/ignatenkobrain/ci-dnf-stack.git'
          branches:
            - origin/wip/jjb
          basedir: ci-dnf-stack
          skip-tag: True

- defaults:
    name: github-testers-defaults
    description: |
        Maintainer: <a href="mailto:ignatenko@redhat.com">Igor Gnatenko</a><br>
        Managed by Jenkins Job Builder. <strong>Do not edit via web.</strong<br>
    wrappers:
      - workspace-cleanup
      - timestamps
    github-context: 'Jenkins (Red Hat)'


##############
## TRIGGERS ##
##############

- job-template:
    name: '{name}-trigger'
    defaults: github-testers-defaults
    concurrent: True
    node: master
    properties:
      # Required by GHPRB. Also adds a nice GitHub link on the job page.
      - github:
          url: 'https://github.com/{github_repo}'
    scm:
      # Required to tell pollscm what we want to poll
      - '{name}-scm'
    triggers:
      # always check for new commits every 5 mins (ci trigger failsafe)
      - pollscm:
          cron: 'H/5 * * * *'
          ignore-post-commit-hooks: True
      - github-pull-request:

          # Always check for PR activity every 5 mins (ci trigger failsafe)
          cron: 'H/5 * * * *'

          # Those who can control the bot
          admin-list:
            - '{admin-list}'

          # those whose PR build without asking permission (whitelisted)
          org-list:
            - '{org-list}'

          white-list:
            - '{white-list}'

          # the commit status context we want to update
          status-context: '{github-context}'

          trigger-phrase: 'bot, test this please'

          # Never post a URL. We manually post the URL to the build server
          # once we upload it. (The default is to post the job URL, which is
          # not good in our case since we're internal).
          status-url: '--none--'

          # Update status when triggered only, and not when started
          triggered-status: 'Testing job has been triggered.'
          started-status: '--none--'

          # Don't do a status update if we succeeded since this is only the
          # triggering job. We will make manually update with success once the
          # testing job passes.
          success-status: '--none--'

          # Update status if somehow something goes wrong with triggering (but
          # that should Never Happen (tm))
          failure-status: 'Internal error while triggering.'
          error-status: 'Internal error while triggering.'
    builders:
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          if [ "$ROOT_BUILD_CAUSE" == "SCMTRIGGER" ]; then
            echo "GIT_BRANCH=${{GIT_BRANCH#origin/}}" >> props
            echo "GIT_COMMIT=$GIT_COMMIT" >> props
          fi

    publishers:
      - trigger-parameterized-builds:
          - project: '{name}-build'
            current-parameters: True
            trigger-with-no-params: True
            property-file: props
            condition: 'SUCCESS'

###################
## UPDATE STATUS ##
###################

- job-template:
    name: '{name}-update-gh-status'
    defaults: github-testers-defaults
    concurrent: True
    node: master
    parameters:
      - choice:
          name: GH_STATE
          choices:
            - pending
            - success
            - error
            - failure
          description: 'GitHub commit state of the status'
    builders:
      - python: |
          from __future__ import print_function

          import os
          import sys

          import requests

          if os.environ['ROOT_BUILD_CAUSE'] == 'GHPRBCAUSE':
              commit = os.environ['ghprbActualCommit']
          elif os.environ['ROOT_BUILD_CAUSE'] == 'SCMTRIGGER':
              commit = os.environ['GIT_COMMIT']
          else:
              print('Triggered for unknown root cause, exiting..')
              sys.exit(0)

          print('Updating status for: %r' % commit)

          data = {{'state': os.environ['GH_STATE']}}

          if 'GH_CONTEXT' in os.environ:
              data['context'] = os.environ['GH_CONTEXT']
          if 'GH_URL' in os.environ:
              data['target_url'] = os.environ['GH_URL']
          else:
              data['target_url'] = os.environ['BUILD_URL']
          if 'GH_DESC' in os.environ:
              data['description'] = os.environ['GH_DESC']

          API_URL = ('https://api.github.com/repos/%s/statuses/%s' %
                     ("{github_repo}", commit))

          token_header = {{'Authorization': 'token {github-token}'}}

          # Requires requests >= 2.4.2
          r = requests.post(API_URL, json=data, headers=token_header)

          if r.status_code != requests.codes.created:
              print('Failed to update commit status [HTTP %d]' % r.status_code)
              print(r.headers)
              print(r.json())
              sys.exit(1)

###########
## BUILD ##
###########

- job-template:
    name: '{name}-build'
    defaults: github-testers-defaults
    concurrent: True
    node: master
    scm:
      - rpm-gitoverlay-scm
      - ci-dnf-stack-scm
    builders:
      - trigger-builds:
          - project: '{name}-update-gh-status'
            current-parameters: True
            predefined-parameters: |
              GH_STATE=pending
              GH_CONTEXT={github-context}
              GH_DESC=Building RPM git-overlay job is running.

      # Build overlay
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          if [ "$ROOT_BUILD_CAUSE" == "SCMTRIGGER" ]; then
            OPTS="--freeze {name}#$GIT_COMMIT"
          elif [ "$ROOT_BUILD_CAUSE" == "GHPRBCAUSE" ]; then
            OPTS="--freeze {name}@refs/pull/$ghprbPullId/head"
          else
            OPTS=""
          fi

          # Python 3 only
          PYTHONPATH=rpm-gitoverlay python3 -m rgo \
            --json -o $BUILD_NUMBER.json --log DEBUG --owner rpmsoftwaremanagement $OPTS \
            ci-dnf-stack/overlays/fedora-24/
          RPMS=$(cat $BUILD_NUMBER.json | python3 -c "import json, sys; obj = json.load(sys.stdin); print(' '.join(str(x) for x in obj['rpms']))")
          echo "RPMS=$RPMS" > $BUILD_NUMBER.properties
    publishers:
      - trigger-parameterized-builds:
          - project: '{name}-provision'
            current-parameters: True
            condition: 'SUCCESS'
            property-file: $BUILD_NUMBER.properties
            fail-on-missing: True
          - project: '{name}-update-gh-status'
            current-parameters: True
            condition: 'UNSTABLE_OR_WORSE'
            predefined-parameters: |
              GH_STATE=error
              GH_CONTEXT={github-context}
              GH_DESC=Error while building RPM git-overlay.

###############
## PROVISION ##
###############

- job-template:
    name: '{name}-provision'
    defaults: github-testers-defaults
    concurrent: False
    node: master
    parameters:
      - string:
          name: RPMS
          description: 'RPMS to install inside'
    scm:
      - ci-dnf-stack-scm
    builders:
      # Download RPMs
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          mkdir rpms
          pushd rpms
            echo $RPMS | xargs -n 1 curl -L -O
            if ! ls *.rpm; then
              exit 1
            fi
          popd

      # Prepare container
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          cat << EOF > Dockerfile
          FROM fedora:24
          ENV LANG C

          RUN dnf -y update
          RUN dnf -y install httpd /usr/bin/behave-2 "dnf-command(repoquery)"
          RUN dnf -y autoremove
          COPY ci-dnf-stack/dnf-docker-test/repo /var/www/html/repo/
          COPY ci-dnf-stack/dnf-docker-test/features /behave/

          COPY rpms /rpms/
          RUN dnf -y install /rpms/*.rpm
          RUN dnf -y clean all
          RUN mkdir /tmp/repos.d && mv /etc/yum.repos.d/* /tmp/repos.d/

          ADD ci-dnf-stack/dnf-docker-test/httpd.conf /etc/httpd/conf/
          ADD ci-dnf-stack/dnf-docker-test/launch-test /usr/bin/

          LABEL {name}="$BUILD_ID"
          VOLUME ["/repo", "/junit"]
          EOF

          CONTAINER="{name}-$(date +%s)"
          sudo /usr/bin/docker build --no-cache --force-rm -t $CONTAINER .
          echo "CONTAINER=$CONTAINER" > props
    publishers:
      - trigger-parameterized-builds:
          - project: '{name}-test'
            current-parameters: True
            condition: 'SUCCESS'
            property-file: props
            fail-on-missing: True
          - project: '{name}-update-gh-status'
            current-parameters: True
            condition: 'UNSTABLE_OR_WORSE'
            predefined-parameters: |
              GH_STATE=error
              GH_CONTEXT={github-context}
              GH_DESC=Error while preparing container.

##########
## TEST ##
##########

- job-template:
    name: '{name}-test'
    defaults: github-testers-defaults
    concurrent: False
    node: master
    scm:
      - ci-dnf-stack-scm
    builders:
      - trigger-builds:
          - project: '{name}-update-gh-status'
            current-parameters: True
            predefined-parameters: |
              GH_STATE=pending
              GH_CONTEXT={github-context}
              GH_DESC=Testing job is running.
      # Run tests
      - shell: |
          #!/bin/bash
          set -xeuo pipefail

          mkdir test-results/
          TEST_DIR=$(readlink -f test-results)
          chcon -Rt svirt_sandbox_file_t $TEST_DIR
          #sudo docker run --rm -v $TEST_DIR:/junit $CONTAINER launch-test autoremove-1 dnf || :
          for f in ci-dnf-stack/dnf-docker-test/features/*.feature; do
            file=$(basename $f)
            test=${{file%.feature}}
            if [[ "$test" == "vars-releasever" ]]; then
              # XXX: https://github.com/rpm-software-management/ci-dnf-stack/pull/135
              continue
            fi
            sudo docker run --rm -v $TEST_DIR:/junit $CONTAINER launch-test "$test" dnf || :
          done
      # Analyze results
      - python: |
          import glob

          import xunitparser

          all = 0
          success = 0
          for xml in glob.glob('test-results/*.xml'):
              with open(xml, "r") as test:
                  _, result = xunitparser.parse(test)
              all += 1
              if result.wasSuccessful():
                  success += 1
          with open('GH_UPDATE.txt', 'w') as gh:
              gh.write('GH_CONTEXT={github-context}\n')
              if success != all:
                  gh.write('GH_STATE=error\n')
              else:
                  gh.write('GH_STATE=success\n')
              gh.write('GH_DESC=%d/%d features works\n' % (success, all))
    publishers:
      - junit:
          results: test-results/*.xml
      - trigger-parameterized-builds:
          - project: '{name}-teardown'
            current-parameters: True
            condition: 'ALWAYS'
          - project: '{name}-update-gh-status'
            current-parameters: True
            condition: 'ALWAYS'
            property-file: GH_UPDATE.txt
            fail-on-missing: True

##############
## TEARDOWN ##
##############

- job-template:
    name: '{name}-teardown'
    defaults: github-testers-defaults
    concurrent: False
    node: master
    parameters:
      - string:
          name: CONTAINER
          description: 'Docker image to remove'
    builders:
      - shell: |
          sudo docker rmi -f $CONTAINER

###################
## PROJECT GROUP ##
###################

- job-group:
    name: github-testers-jobs
    jobs:
      - '{name}-trigger'
      - '{name}-update-gh-status'
      - '{name}-build'
      - '{name}-provision'
      - '{name}-test'
      - '{name}-teardown'
